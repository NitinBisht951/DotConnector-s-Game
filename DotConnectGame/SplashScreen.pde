int[] data = {10, 29, 13, 9, 13, 8, 13, 7, 13, 6, 14, 6, 15, 6, 16, 6, 17, 6, 18, 6, 18, 7, 18, 8, 18, 9, 13, 11, 14, 11, 15, 11, 16, 11, 17, 11, 18, 11, 18, 12, 18, 13, 18, 14, 17, 14, 16, 14, 15, 14, 14, 14, 13, 14, 
  13, 13, 13, 12, 13, 16, 14, 16, 15, 16, 16, 16, 17, 16, 18, 16, 14, 17, 13, 18, 13, 19, 14, 19, 15, 19, 16, 19, 17, 19, 18, 19, 13, 21, 14, 21, 15, 21, 16, 21, 17, 21, 18, 21, 14, 
  22, 13, 23, 13, 24, 14, 24, 15, 24, 16, 24, 17, 24, 18, 24, 13, 29, 13, 28, 13, 27, 13, 26, 14, 26, 15, 26, 16, 26, 17, 26, 18, 26, 18, 27, 18, 28, 18, 29, 15, 27, 15, 28, 13, 33, 
  13, 32, 13, 31, 14, 31, 15, 31, 16, 31, 17, 31, 18, 31, 18, 32, 18, 33, 18, 34, 13, 34, 13, 36, 13, 37, 13, 38, 13, 39, 13, 37, 14, 37, 15, 37, 16, 37, 17, 37, 18, 37, 22, 18, 22, 
  19, 22, 20, 22, 21, 23, 19, 24, 19, 25, 19, 26, 19, 27, 19, 22, 23, 23, 23, 24, 23, 25, 23, 26, 23, 27, 23, 24, 24, 24, 25, 24, 26, 22, 26, 23, 26, 25, 26, 26, 26, 27, 26, 22, 28, 
  23, 28, 24, 28, 25, 28, 26, 28, 27, 28, 27, 29, 27, 30, 27, 31, 22, 29, 22, 30, 22, 31, 24, 29, 24, 30, 31, 27, 32, 27, 33, 27, 34, 27, 35, 27, 36, 27, 36, 28, 36, 29, 36, 30, 35, 
  30, 34, 30, 33, 30, 32, 30, 31, 30, 31, 29, 31, 28, 31, 27, 31, 26, 31, 32, 32, 32, 33, 32, 34, 32, 35, 32, 36, 32, 36, 33, 36, 34, 36, 35, 35, 35, 34, 35, 33, 35, 32, 35, 31, 35, 
  31, 34, 31, 33, 31, 37, 31, 38, 31, 39, 31, 40, 32, 38, 33, 38, 34, 38, 35, 38, 36, 38, 31, 44, 31, 43, 31, 42, 32, 42, 33, 42, 33, 43, 33, 44, 34, 44, 35, 44, 36, 44, 36, 43, 36, 
  42, 10, 3, 11, 3, 12, 3, 13, 3, 14, 3, 15, 3, 16, 3, 17, 3, 18, 3, 19, 3, 20, 3, 21, 3, 22, 3, 23, 3, 24, 3, 25, 3, 26, 3, 27, 3, 28, 3, 29, 3, 30, 3, 31, 3, 32, 3, 33, 3, 34, 3, 35, 3, 36, 
  3, 37, 3, 38, 3, 39, 3, 39, 4, 39, 5, 39, 6, 39, 7, 39, 8, 39, 9, 39, 10, 39, 11, 39, 12, 39, 13, 39, 14, 39, 15, 39, 16, 39, 17, 39, 18, 39, 19, 39, 20, 39, 21, 39, 22, 39, 23, 39, 24, 
  39, 25, 39, 26, 39, 27, 39, 28, 39, 29, 39, 30, 39, 31, 39, 32, 39, 33, 39, 34, 39, 35, 39, 36, 39, 37, 39, 38, 39, 39, 39, 40, 39, 41, 39, 42, 39, 43, 39, 44, 39, 45, 39, 46, 39, 47, 
  38, 47, 37, 47, 36, 47, 35, 47, 34, 47, 33, 47, 32, 47, 31, 47, 30, 47, 29, 47, 28, 47, 27, 47, 26, 47, 25, 47, 24, 47, 23, 47, 22, 47, 21, 47, 20, 47, 19, 47, 18, 47, 17, 47, 16, 47, 
  15, 47, 14, 47, 13, 47, 12, 47, 11, 47, 10, 47, 10, 46, 10, 45, 10, 44, 10, 43, 10, 42, 10, 41, 10, 40, 10, 39, 10, 38, 10, 37, 10, 35, 10, 34, 10, 33, 10, 36, 10, 32, 10, 31, 10, 30, 
  10, 28, 10, 27, 10, 26, 10, 25, 10, 24, 10, 23, 10, 22, 10, 4, 10, 5, 10, 6, 10, 7, 10, 8, 10, 9, 10, 10, 10, 11, 10, 12, 10, 13, 10, 14, 10, 15, 10, 16, 10, 17, 10, 18, 10, 19, 10, 20, 10, 21};

final byte sDim = 60;               //splash Dimensions ROWS and COLS
class SplashScreen {
  int waitTime = 2000;
  boolean splash = true;
  Dot[][] dots = new Dot[sDim][sDim];

  SplashScreen() {
    float gapDist = 3.8095238;
    PVector s = new PVector(2*gapDist, 2*gapDist);
    for (byte r = 0; r < sDim; r++) {
      float rStart = s.y + r*(gapDist+RADII);
      for (byte c = 0; c < sDim; c++) {
        float cStart = s.x + c*(gapDist+RADII);
        dots[r][c] = new Dot(new PVector(cStart, rStart));
      }
    }
  }

  boolean find(int x, int y) {
    boolean found = false;
    for (int i = 0; i < data.length; i+=2) {
      if (data[i] == x-6 && data[i+1] == y-5) {
        found = true;
        break;
      }
    }
    return found;
  }

  void splash() {
    for (int i = 0; i < 200; i++) {
      PVector lastDotIndexes = new PVector(random(sDim), random(sDim));
      boolean found = find(int(lastDotIndexes.x), int(lastDotIndexes.y));
      if (lastDotIndexes.x >= 0 && found == false) {
        dots[int(lastDotIndexes.x)][int(lastDotIndexes.y)].setCol(0);
      }
    }
    for (byte r = 0; r < sDim; r++)
      for (byte c = 0; c < sDim; c++)
        dots[r][c].draw();
  }
  
  void end() {
    splash = false;
  }
}
